 
			程序结构

主线程 - 游戏窗口线程 - 游戏线程 - 游戏对象 - 输入
       - 游戏窗口线程 - ...                 - 界面
                                            - AI
                                            - 物理
                                            - 图像
                                            - 声音

模块之间最好只通过参数传递信息（尽量少用全局对象）。
游戏框架要与Win32框架分开线程，这样受到的影响就少很多。
只允许开一个游戏窗口。但也要考虑到以后的扩充，尽量把程序当作有多个窗口来编写。
目前DSound等DX部件在多线程中无法多次释放。
------------

只读取一个屏幕的图块的前提下的显存管理方法：

建立一个表面指针的索引表，共64K个索引，每个索引2字节，共占内存128KB。
建立一个(表面指针 + 表面活性 + 图像索引 + 图像信息)表，估计最多1000个指针，共占20KB内存。
显示函数接到一个图像索引，先由表面指针的索引表查找指针索引，找到则直接Blt()。否则先看指针表里是否有空位，有则设置两个表里的数据再创建表面、Blt()，没有则查找活性为0的指针表项。找到后先消除原来信息，再设置新信息，最后创建表面、Blt()。如果所有表面活性都不为0，则出错退出。
Blt()后，把该表面的活性恢复到某个固定的较高的值。在下一帧绘制前，先减少所有表面的活性。

> 每隔一段时间整理表面信息表里的数据，让有活性的排在前面，无活性的放到后面，并修改已载入表面数。
------------

由于游戏线程和窗口线程分开了，有没有可能正在改变客户区位置时游戏线程读取了这个只改变了一半的客户区位置，而导致图像在一瞬间出错？

可能。所以需要线程安全的程序体系。
------------

全屏模式下切换到桌面时会最小化窗口，并同时产生Blt失败的事件。

> 要用RestoreAllSurface()处理DX表面丢失。
------------

			场景载入

一次载入3x3块是可行的。每一块完整载入，上下左右都必须绘制正确。所以要多读一部分图块。
左右要多读的块数相等，上不用多读，下要比左右多一些。具体是多少呢？
不管是多少，这硬性限制了建筑的大小。这也是没办法的事。
地图、表面、建筑应该分开考虑。最大大小不同，多读的块数也不同。
------------

如果用屏幕视角先远后近的方法绘制，非菱形建筑（比如2x3）如何实现遮盖？

按屏幕坐标从左到右，从上到下的方法无法解决这个问题，只有回到按地图坐标来的老办法了。
------------
------------
------------
------------